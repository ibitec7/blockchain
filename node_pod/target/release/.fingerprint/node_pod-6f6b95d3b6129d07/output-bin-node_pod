{"message":"use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified","code":{"code":"async_fn_in_trait","explanation":null},"level":"warning","spans":[{"file_name":"src/concensus.rs","byte_start":466,"byte_end":471,"line_start":16,"line_end":16,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"    async fn preprepare_phase(&mut self, _pool: Vec<Transaction>,_producer: &BaseProducer){}","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(async_fn_in_trait)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change","code":null,"level":"help","spans":[{"file_name":"src/concensus.rs","byte_start":466,"byte_end":472,"line_start":16,"line_end":16,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    async fn preprepare_phase(&mut self, _pool: Vec<Transaction>,_producer: &BaseProducer){}","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/concensus.rs","byte_start":552,"byte_end":552,"line_start":16,"line_end":16,"column_start":91,"column_end":91,"is_primary":true,"text":[{"text":"    async fn preprepare_phase(&mut self, _pool: Vec<Transaction>,_producer: &BaseProducer){}","highlight_start":91,"highlight_end":91}],"label":null,"suggested_replacement":" -> impl std::future::Future<Output = ()> + Send","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/concensus.rs","byte_start":553,"byte_end":553,"line_start":16,"line_end":16,"column_start":92,"column_end":92,"is_primary":true,"text":[{"text":"    async fn preprepare_phase(&mut self, _pool: Vec<Transaction>,_producer: &BaseProducer){}","highlight_start":92,"highlight_end":92}],"label":null,"suggested_replacement":" async {} ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/concensus.rs:16:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn preprepare_phase(&mut self, _pool: Vec<Transa\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(async_fn_in_trait)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;9masync \u001b[0m\u001b[0mfn preprepare_phase(&mut self, _pool: Vec<Transaction>,_producer: &BaseProducer){}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    fn preprepare_phase(&mut self, _pool: Vec<Transaction>,_producer: &BaseProducer)\u001b[0m\u001b[0m\u001b[38;5;10m -> impl std::future::Future<Output = ()> + Send\u001b[0m\u001b[0m{\u001b[0m\u001b[0m\u001b[38;5;10m async {} \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified","code":{"code":"async_fn_in_trait","explanation":null},"level":"warning","spans":[{"file_name":"src/concensus.rs","byte_start":560,"byte_end":565,"line_start":18,"line_end":18,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"    async fn prepare_phase(&mut self, _pkey_store: &HashMap<String, PublicKey>, _primary_msg: Vec<String>,_producer: &BaseProducer){}","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change","code":null,"level":"help","spans":[{"file_name":"src/concensus.rs","byte_start":560,"byte_end":566,"line_start":18,"line_end":18,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    async fn prepare_phase(&mut self, _pkey_store: &HashMap<String, PublicKey>, _primary_msg: Vec<String>,_producer: &BaseProducer){}","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/concensus.rs","byte_start":687,"byte_end":687,"line_start":18,"line_end":18,"column_start":132,"column_end":132,"is_primary":true,"text":[{"text":"    async fn prepare_phase(&mut self, _pkey_store: &HashMap<String, PublicKey>, _primary_msg: Vec<String>,_producer: &BaseProducer){}","highlight_start":132,"highlight_end":132}],"label":null,"suggested_replacement":" -> impl std::future::Future<Output = ()> + Send","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/concensus.rs","byte_start":688,"byte_end":688,"line_start":18,"line_end":18,"column_start":133,"column_end":133,"is_primary":true,"text":[{"text":"    async fn prepare_phase(&mut self, _pkey_store: &HashMap<String, PublicKey>, _primary_msg: Vec<String>,_producer: &BaseProducer){}","highlight_start":133,"highlight_end":133}],"label":null,"suggested_replacement":" async {} ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/concensus.rs:18:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn prepare_phase(&mut self, _pkey_store: &HashMa\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;9masync \u001b[0m\u001b[0mfn prepare_phase(&mut self, _pkey_store: &HashMap<String, PublicKey>, _primary_msg: Vec<String>,_producer: &BaseProducer){}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    fn prepare_phase(&mut self, _pkey_store: &HashMap<String, PublicKey>, _primary_msg: Vec<String>,_producer: &BaseProducer)\u001b[0m\u001b[0m\u001b[38;5;10m -> impl std::future::Future<Output = ()> + Send\u001b[0m\u001b[0m{\u001b[0m\u001b[0m\u001b[38;5;10m async {} \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"2 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 2 warnings emitted\u001b[0m\n\n"}
